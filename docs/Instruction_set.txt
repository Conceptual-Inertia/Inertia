/*
 *
 * GENERALLY NOT FANNGGOVITCH STANDARD BYTECODE FORMAT - .gnf files
 * 
 * Created by Tyler Liu on 2016/09/23.
 * Copyright Â© 2016 Tyler Liu. All rights reserved.
 *
 * PUBLISHED UNDER THE GNU GENERAL PUBLIC LICENSE v3.0.
 *
 * instruction set for the Inertia VM
 *
 * INSTRUCTION         |         DESCRIPTION
 * ====================+===========================
 * add                 |           Addition
 * sub                 |           Division
 * mul                 |           Multiplication
 *
 * lt                  |           Less Than
 * eq                  |           Equal to
 *
 * #                   |           Constant
 * R                   |           Register Address
 * @                   |           Memory Adddress
 *
 * not                 |           bitwise not
 * and                 |           Bitwise and
 * or                  |           Bitwise or
 * shiftl              |           Shift left
 * shiftr              |           Shift right
 *
 * ============= General Instructions ==============
 * call f()            |           Call procedure f()
 * ret                 |           return a value
 *
 * br a
 * brt a               |           Branch to a
 * brf a
 *
 * load i
 *
 * print
 *
 * halt
 *
 *
 *
 */
#ifndef NUM_REGS
  #define NUM_REGS 4
#endif

#ifndef NUM_MEMS
  #define NUM_MEMS 100
#endif



#define INERTIA_ADD 0x0 // Integer Addition
#define INERTIA_DIV 0x1 // Integer Division
#define INERTIA_MUL 0x2 // Integer Multiplication

#define INERTIA_ILT 0x3 // Integer Less Than
#define INERTIA_IEQ 0x4 // Integer Equal To
#define INERTIA_AND 0x5 // Bitwise AND
#define INERTIA_NOT 0x6 // Bitwise NOT
#define INERTIA_OR 0x7 //  Bitwise OR
#define INERTIA_SHIFTL 0x8 //Bitwise SHIFTL
#define INERTIA_SHIFTR 0x9 //Bitwise SHIFTR

#define INERTIA_PROCEDURE 0xA // Initialize Concept Procedure OUTPUT
#define INERTIA_PRINT 0xB // Print to stdout
#define INERTIA_LOAD 0xC // Load value
#define INERTIA_BRANCH 0xD //branch / goto
#define INERTIA_IF 0xE //branch / if
#define INERTIA_RETURN 0xF //return
